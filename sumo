# Daphne, Bec, Grace, Anna
# GSET Robotics
# July 11, 2016

###PORTS DIRECTORY###
#BBS1 - touch
#BAS2 - reflective light 
#BBM1 - motor RIGHT
#BAM1 - motor LEFT
#BBM2 - motor 3
#BAS1 - ultrasonic

#light = psm.BBS1.lightSensorNXT(True)

##output:
#red = turned on
#purple = escaping
#green = being touched

from PiStorms import PiStorms
from time import sleep

class Sumo:
    #done
    def __init__(self, psm):
        print "init"
        self.psm = psm
        self.psm.BBS1.resetTouchesNXT()
        self.on = False
        self.black = 700
        self.speed = 75

    #done
    #turns on, puts light on, waits 5 sec, then goes straight to tip
    def turnOn(self):
        print "turn on"
        self.on = True
        self.psm.led(1,255,0,0)
        sleep(5)
        self.psm.BAM1.setSpeed(self.speed)
        self.psm.BBM1.setSpeed(self.speed)
        self.psm.BBM2.setSpeed(-self.speed)
        sleep(.6)
        self.psm.BAM1.setSpeed(0)
        self.psm.BBM1.setSpeed(0)
        self.psm.BBM2.setSpeed(0)
        sleep(.03)


    #done
    #check on front sensor, maybe do right/left thing (favor right)
        #if robot disappears, turn left quickly and exit push
    #pushes on until on edge, in which case does onEdge thing and quits,
    #or until it sees that it is going backwards/totally static, in which case it goes around
    def push(self):
        print "push"
        goOn = True
        while(goOn):
            if self.onEdge():
                goOn = False
                break
            #go forward
            self.psm.BAM1.setSpeed(self.speed*2)
            self.psm.BBM1.setSpeed(self.speed*2)
            self.psm.BBM2.setSpeed(-self.speed*2)
            sleep(.5)
            
            #check if button is pressed
            if (self.psm.isKeyPressed()) or not self.robotVeryFront() or self.onEdge:
                goOn = False
                break
            if self.robotLeft():
                goOn = False
                self.escapeTurn()
                break

            #pause back wheel and check pos
            self.psm.BBM2.float()
            pos = self.BBM2.pos()
            sleep(.05)
            tempPos = self.psm.BBM2.pos()
            if tempPos == pos: #if they equal, pause for a second then check again
                sleep(.2)
                tempPos = self.psm.BBM2.pos()
                if tempPos <= pos:
                    #do esape thing
                    goOn = False
                    break
            elif tempPos < pos:
                self.escape()
                goOn = False
                break
            pos = TempPos
            #check if button is pressed
            if (self.psm.isKeyPressed()):
                self.escape()
                goOn = False
                break
        self.findApponent()

    #do right/left thing using go forward and also use that to tell if robot in front, keep checking for side
    def findApponent(self):
        print "FA"
        goOn = True
        while (goOn):
            if self.onEdge() or self.psm.isKeyPressed():
                goOn = False
                break
            if self.goForward(.02, self.speed) and self.robotVeryFront():
                self.push()
                goOn = False
                break
                print "bacoooonn"
            if self.robotLeft():
                self.escapeTurn()
                goOn = False
                break

    #done                
    #go back for half a sec then do a 180
    def turnAround(self):
        print "TA"
        #assumes that either senses white with back sensor or is b
        #go backwards then spin
        self.psm.BBM2.setSpeed(-self.speed)
        self.psm.BBM1.setSpeed(self.speed)
        self.psm.BAM1.setSpeed(self.speed)
        sleep(.5)
        self.psm.BBM2.setSpeed(0)
        self.psm.BBM1.setSpeed(self.speed)
        self.psm.BAM1.setSpeed(-self.speed)
        sleep(3)
        #spin
#        self.psm.BBM1.setSpeed(self.speed)
 #       self.psm.BAM1.setSpeed(-self.speed)
  #      self.psm.BBM2.float()
   #     sleep(5)
        self.findApponent()

    #done
    #call when know being pushed back
    def escape(self):
        print "esc"
        sself.psm.BBM1.setSpeed(-self.speed*3)
        self.psm.BAM1.setSpeed(self.speed)
        self.psm.BBM2.setSpeed(-self.speed/20)
        sleep(2.1)
        self.psm.BBM1.setSpeed(self.speed)
        self.psm.BAM1.setSpeed(self.speed)
        self.psm.BBM2.setSpeed(-self.speed)
        sleep(.4)
        self.push()

 #done
    #call when know robot on left
    def escapeTurn(self):
        print "escT"
        for i in range(6):
            self.psm.BBM1.setSpeed(-self.speed)
            self.psm.BAM1.setSpeed(-self.speed)
            self.psm.BBM2.setSpeed(self.speed)
            sleep(.1)
            self.onEdge()
        self.push()

    #done
    #just do right/left thing, favor left (if good and done, do zig zag)
    def goForward(self, time, speed):
        print "goF"
        if self.robotFront():
            self.psm.BBM1.setSpeed(speed*-.95)
            self.psm.BAM1.setSpeed(speed*-1.05)
            self.psm.BBM2.setSpeed(speed)
            sleep(time)
            return True
        self.psm.BBM1.setSpeed(speed*-1.1)
        self.psm.BAM1.setSpeed(speed*-.9)
        self.psm.BBM2.setSpeed(speed)
        sleep(time)
        return False
        
        def isBlack(self, light):
        print "isBlac"
        if light >= self.black:
            return True
        return False

    #done, but num needs fiddling
    def robotFront(self):
        print "rFt"
        return psm.BAS1.distanceUSEV3() <= 1000

     #done, but num needs fiddling
    def robotVeryFront(self):
        print "rVF"
        return psm.BAS1.distanceUSEV3() <= 60

    #done
    def onEdge(self):
        print "oE"
#       return False
        lightSenseWhite = not (self.isBlack(self.psm.BAS2.lightSensorNXT(True)))
        if self.on and lightSenseWhite:
            self.turnAround()
            return True
        return False
        

psm = PiStorms()
robot = Sumo(psm)
#wait until button is pressed to "turn the robot on"
while True:
    if psm.isKeyPressed():
        break
    sleep(.1)
robot.turnOn()
robot.findApponent()
psm.BBM1.brake()
psm.BBM2.brake()
psm.BAM1.brake()
psm.led(1,0,0,0)
psm.led(2,0,0,0)
