# Daphne, Bec, Grace, Anna
# GSET Robotics
# July 11, 2016

###PORTS DIRECTORY###
#BAS1 - touch
#BAS2 - reflective light 
#BBM1 - motor RIGHT
#BAM1 - motor LEFT
#BBM2 - motor 3
#BBS1 - ultrasonic

#light = psm.BBS1.lightSensorNXT(True)

##output:
#red = turned on
#purple = escaping
#green = being touched

from PiStorms import PiStorms
from time import sleep

class Sumo:
    #done
    def __init__(self, psm):
        self.psm = psm
        self.psm.BAS1.resetTouchesNXT()
        self.on = False
        self.black = 690

    #done
    def isBlack(self, light):
        if light >= self.black:
            return True
        return False

    #done
    #turns on, puts light on, waits 5 sec, then goes straight to tip
    def turnOn(self):
        self.on = True
        self.psm.led(1,255,0,0)
        sleep(5)
        self.psm.BAM1.setSpeed(100)
        self.psm.BBM1.setSpeed(100)
        self.psm.BBM2.setSpeed(-100)
        sleep(.8)

    #done
    #check on front sensor, maybe do right/left thing (favor right)
        #if robot disappears, turn left quickly and exit push
    #pushes on until on edge, in which case does onEdge thing and quits,
    #or until it sees that it is going backwards/totally static, in which case it goes around
    def push(self):
        goOn = True
        while(goOn):
            if self.onEdge():
                goOn = False
                break
            #go forward
            self.psm.BAM1.setSpeed(-900)
            self.psm.BBM1.setSpeed(-900)
            self.psm.BBM2.setSpeed(900)
            sleep(.5)

            #check if button is pressed
            if (self.psm.isKeyPressed()) or not self.robotVeryFront() or self.onEdge:
                goOn = False
                break
            if self.robotLeft():
                goOn = False
                self.escapeTurn()
                break
            
            #pause back wheel and check pos
            self.psm.BBM2.float()
            pos = self.BBM2.pos()
            sleep(.1)
            tempPos = self.psm.BBM2.pos()
            if tempPos == pos: #if they equal, pause for a second then check again
                sleep(.5)
                tempPos = self.psm.BBM2.pos()
                if tempPos <= pos:
                    #do esape thing
                    goOn = False
                    break
            elif tempPos < pos:
                self.escape()
                goOn = False
                break
            pos = TempPos
            #check if button is pressed
            if (self.psm.isKeyPressed()):
                self.escape()
                goOn = False
                break
        self.findApponent()

    #do right/left thing using go forward and also use that to tell if robot in front, keep checking for side
    def findApponent(self):
        goOn = True
        while (goOn):
            if self.onEdge() or self.psm.isKeyPressed():
                goOn = False
                break
            if self.goForward(.5) and self.robotVeryFront():
                self.push()
                goOn = False
                break
            if self.robotLeft():
                self.escapeTurn()
                goOn = False
                break

    #done                
    #go back for half a sec then do a 180
    def turnAround(self):
        #assumes that either senses white with back sensor or is b
        #go backwards then spin
        self.psm.BBM1.setSpeed(200)
        self.psm.BAM1.setSpeed(200)
        self.psm.BBM2.setSpeed(-300)
        sleep(.5)
        #spin
        self.psm.led(1,255,0,255)
        self.psm.BBM1.setSpeed(-200)
        self.psm.BAM1.setSpeed(200)
        sleep(.2)
        self.findApponent()

    #done
    #call when know being pushed back
    def escape(self):
        self.psm.BBM1.setSpeed(-500)
        self.psm.BAM1.setSpeed(500)
        self.psm.BBM2.setSpeed(0)
        sleep(.05)
        self.psm.BBM1.setSpeed(-100)
        self.psm.BAM1.setSpeed(-100)
        sleep(.02)
        self.findApponent()

    #done
    #call when know robot on left
    def escapeTurn(self):
        self.psm.BBM1.setSpeed(-500)
        self.psm.BAM1.setSpeed(-500)
        self.psm.BBM2.setSpeed(500)
        sleep(.05)
        if self.isBlack(self.psm.BBS1.lightSensorNXT(True)):
            self.psm.BBM1.setSpeed(500)
            self.psm.BAM1.setSpeed(-500)
            self.psm.BBM2.setSpeed(100)
            sleep(.1)
        else:
            self.psm.BBM1.setSpeed(500)
            self.psm.BAM1.setSpeed(500)
            self.psm.BBM2.setSpeed(-500)
        self.findApponent()

    #done
    #just do right/left thing, favor left (if good and done, do zig zag)
    def goForward(self, time, speed):
        if self.robotFront():
            self.psm.BBM1.setSpeed(speed*-.95)
            self.psm.BAM1.setSpeed(speed*-1.05)
            self.psm.BBM2.setSpeed(speed)
            sleep(time)
            return True
        self.psm.BBM1.setSpeed(speed*-1.1)
        self.psm.BAM1.setSpeed(speed*-.9)
        self.psm.BBM2.setSpeed(speed)
        sleep(time)
        return False
        
        
    def robotLeft(self):#idk how this works with multiple touches, test this out
        if self.psm.BAS1.numTouchesNXT() > 0:
            self.psm.BAS1.resetTouchesNXT()
            self.psm.led(1,0,255,0) #turn on green to signal a touch
            return True
        return False

    #done, but num needs fiddling
    def robotFront(self):
        return psm.BBS1.distanceUSEV3() <= 900 

     #done, but num needs fiddling
    def robotVeryFront(self)
        return psm.BBS1.distanceUSEV3() <= 90 


    #done
    def onEdge(self):
        lightSenseWhite = not (self.isBlack(self.psm.BAS2.lightSensorNXT(True)))
        if self.on and lightSenseWhite:
            self.turnAround()
            return True
        return False


psm = PiStorms()
robot = Sumo(psm)
#wait until button is pressed to "turn the robot on"
while True:
    if psm.isKeyPressed():
        break
    sleep(.1)
robot.turnOn()
robot.findApponent()

